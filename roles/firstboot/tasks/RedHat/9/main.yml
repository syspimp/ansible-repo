---
- name: "Firstboot check"
  stat:
    path: /opt/.firstboot
  register: firstbootcheck

- name: "debug"
  debug: var=firstbootcheck

- name: "First boot configuration block for aws"
  block:
  - name: "Find Group Inventory for 'capsule-lb'"
    uri:
      url: "https://{{ tower_server }}/api/v2/groups/?search=capsule-lb"
      validate_certs: no
      method: GET
      user: "{{ tower_user }}"
      password: "{{ tower_pass }}"
      force_basic_auth: yes
      status_code: [200,202,204]
      body_format: json
    register: groupidcheck
    when:
        - ansible_local['roles'] is defined

  - name: "Set the host_id fact"
    set_fact:
      satgroup_host_id: "{{ groupidcheck.json.results[0].id }}"
    when:
        - ansible_local['roles'] is defined

  - name: "Find the name of the satellite-server"
    uri:
      url: "https://{{ tower_server }}/api/v2/groups/{{ satgroup_host_id }}/hosts"
      validate_certs: no
      method: GET
      user: "{{ tower_user }}"
      password: "{{ tower_pass }}"
      force_basic_auth: yes
      status_code: [200,202,204]
      body_format: json
    register: hostidcheck
    when:
        - ansible_local['roles'] is defined

  - name: "Set the host_id fact for non sat servers"
    set_fact:
      sat6_server: "{{ hostidcheck.json.results[0].name }}"
    when:
        - ansible_local['roles'] is defined

  - name: "Get fqdn for the satellite server for non sat servers"
    shell: |
      hostname --fqdn
    register: fqdnname
    delegate_to: "{{ sat6_server }}"
    ignore_unreachable: true
    when:
        - ansible_local['roles'] is defined
  
  - name: "Set the fqdn hostname fact"
    set_fact:
      sat6_fqdn: "{{ fqdnname.stdout }}"
    when:
        - ansible_local['roles'] is defined
  when:  firstbootcheck.stat.exists == false

  rescue:
    - name: "[rescue] satellite-servers: Get fqdn for the satellite server from localhost"
      shell: |
        hostname --fqdn
      register: fqdnname
      when:
      - ansible_local['roles']['default'] is defined
      - ansible_local['roles']['default']['role'] == 'satellite-server'

    - name: "[rescue] satellite-servers: Set the fqdn hostname fact"
      set_fact:
        sat6_fqdn: "{{ fqdnname.stdout }}"
      when:
      - ansible_local['roles']['default'] is defined
      - ansible_local['roles']['default']['role'] == 'satellite-server'

    - name: "[rescue] satellite-servers: Set the server ip fact"
      set_fact:
        sat6_server: "{{ inventory_hostname }}"
      when:
      - ansible_local['roles']['default'] is defined
      - ansible_local['roles']['default']['role'] == 'satellite-server'

    - name: "[rescue] No Satellite defined. Set the facts to None"
      set_fact:
        sat6_fqdn: "None"
        sat6_server: "None"
      when:
      - ansible_local['roles']['default'] is defined
      - ansible_local['roles']['default']['role'] != 'satellite-server'

- name: "First boot configuration block for aws"
  block:
    # end of aws block
    - name: "No Satellite defined. Set the facts to None"
      set_fact:
        sat6_fqdn: "None"
        sat6_server: "None"
      when:
      - sat6_fqdn is not defined
      - sat6_server is not defined
    
    - name: "list the rpms installed"
      shell: rpm -qa
      register: rpmlist
    
    - name: "list the repos installed"
      shell: yum repolist
      register: repolist
    
    - name: "Set up /etc/hosts file and hostname"
      shell: |
        shortname=$(hostname --short)
        hostname=${shortname}.{{ dns_domain }}
        echo "${hostname}" > /etc/hostname
        hostnamectl set-hostname ${hostname}
        grep "{{ ansible_default_ipv4['address'] }}" /etc/hosts || echo "{{ ansible_default_ipv4['address'] }} ${hostname} ${shortname}" >> /etc/hosts
        echo "10.55.102.158 compute4.tfound.org compute4" >> /etc/hosts
        echo "10.55.102.159 compute5.tfound.org compute5" >> /etc/hosts
      become: true
      args:
        creates: /opt/.firstboot
      when: "ansible_system_vendor | regex_search('KVM')"
     
    - name: "Set up /etc/hosts file and hostname"
      shell: |
        shortname=$(/usr/bin/vmware-rpctool "info-get guestinfo.hostname")
        hostname=${shortname}.{{ dns_domain }}
        echo "${hostname}" > /etc/hostname
        hostnamectl set-hostname ${hostname}
        grep "{{ ansible_default_ipv4['address'] }}" /etc/hosts || echo "{{ ansible_default_ipv4['address'] }} ${hostname} ${shortname}" >> /etc/hosts
      become: true
      #args:
      #  creates: /opt/.firstboot
      #when: "ansible_system_vendor == 'VMware, Inc.'"
    
    - name: "Set up /etc/hosts file and hostname for Satellite"
      shell: |
        grep "{{ sat6_fqdn }}" /etc/hosts || echo "{{ hostvars[sat6_server]['ansible_facts']['eth0']['ipv4']['address'] | default(hostvars[sat6_server]['ansible_host'],True) }} {{ sat6_fqdn }}" >> /etc/hosts
      become: true
      when: sat6_fqdn != "None"
      args:
        creates: /opt/.firstboot
    
      #  - name: "Check if in aws"
      #shell: |
      #  curl -s http://169.254.169.254/2019-10-01/meta-data/public-ipv4 || echo "html"
      #register: dc
      
    - name: "Config coredumps"
      ansible.builtin.lineinfile:
        path: /etc/systemd/coredump.conf 
        line: "{{ item }}"
      loop:
        - "ProcessSizeMax=0"
        - "Storage=none"
      
    - name: "AWS: get instance id"
      shell: |
        curl -s http://169.254.169.254/2019-10-01/meta-data/instance-id
      register: instanceid
      when: "ansible_system_vendor | regex_search('EC2') or ansible_system_vendor | regex_search('Xen')"
    
    - name: "AWS: get region id"
      shell: |
        curl -s http://169.254.169.254/2019-10-01/meta-data/placement/availability-zone
      register: regionid
      when: "ansible_system_vendor | regex_search('EC2') or ansible_system_vendor | regex_search('Xen')"
    
    - name: "Check for hosts not in aws"
      set_fact:
        in_aws: "{{ ansible_system_vendor | regex_search('EC2') }} or ansible_system_vendor | regex_search('Xen')"
    
    - name: "Get the aws short hostname"
      shell: |
        hostname --short  
      register: awsshortname
      when: "ansible_system_vendor | regex_search('EC2') or ansible_system_vendor | regex_search('Xen')"
    
    - name: "Set ntp server"
      set_fact:
        ntp_server: "0.rhel.pool.ntp.org"
      when: "ansible_system_vendor | regex_search('EC2') or ansible_system_vendor | regex_search('Xen')"
    
    - name: "Set ntp server for vmware"
      set_fact:
        ntp_server: "10.55.102.5"
      when: "ansible_system_vendor == 'VMware, Inc.'"
    
    - name: "Set ntp to true"
      shell: |
        ntpdate server {{ ntp_server }} iburst
        timedatectl set-ntp true
        systemctl restart chronyd
      poll: 0
      async: 1
      become: true
      ignore_errors: yes
      args:
        creates: /opt/.firstboot
    
    - name: Set authorized key for root
      authorized_key:
        user: root
        state: present
        key: "{{ automation_user_pub_key }}"
      become: true
    
    - name: "try to install python for rhel9 real quick"
      yum:
        name: "{{ item }}"
        state: latest
      loop: "{{ redhat9_packages }}"
      become: true
      when:
      - ansible_distribution_major_version == '9'

    - name: "Enabling and restarting services {{ enabled_svcs }}"
      service:
        name: "{{ item }}"
        #state: restarted
        enabled: yes
      with_items: "{{ rhel9_enabled_svcs }}"
      become: true
    
    - name: "Restart NetworkManager"
      shell: |
        systemctl restart NetworkManager
      become: true
      ignore_errors: yes
      args:
        creates: /opt/.firstboot

    - name: "Stopping and disabling services {{ rhel9_disabled_svcs }}"
      service:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items: "{{ rhel9_disabled_svcs }}"
      ignore_errors: yes
      become: true
    
    - name: "Masking disabled services {{ rhel9_disabled_svcs }}"
      shell: |
        systemctl mask {{ item }}
      loop: "{{ rhel9_disabled_svcs }}"
      ignore_errors: yes
      become: true
    
    - name: "update system crypto policy to NO:SHA1"
      shell:
        update-crypto-policies --set DEFAULT:NO-SHA1
      become: true

    - name: "Put the role in the MOTD"
      shell: |
        cat /etc/ansible/facts.d/roles.fact >> /etc/motd
        echo "Authorized use only" >> /etc/motd
      become: true
      ignore_errors: yes
    
    - name: "Add auditd rules to detect login log tampering to pass pci dss"
      ansible.builtin.lineinfile:
        path: /etc/audit/rules.d/audit.rules
        regexp: '^{{ item }}'
        line: "{{ item }}"
      loop:
      - "-w /var/log/tallylog -p wa -k logins"
      - "-w /var/log/faillock -p wa -k logins"
      - "-w /var/log/lastlog -p wa -k logins"

    - name: "bashrc umask limits"
      ansible.builtin.lineinfile:
        path: /etc/bashrc
        line: "{{ item }}"
      loop:
      - "umask 027"

    - name: "profile umask limits"
      ansible.builtin.lineinfile:
        path: /etc/profile
        line: "{{ item }}"
      loop:
      - "umask 027"

    - name: "login.defs  umask limits"
      ansible.builtin.lineinfile:
        path: /etc/login.defs
        line: "{{ item }}"
      loop:
      - "umask 027"

    - name: "Add custom rules to detect login log tampering to pass pci dss"
      template: 
        src: custom-auditd.rules.j2
        dest: /etc/audit/rules.d/custom.rules
        owner: root 
        group: root 
        mode: 0644
      become: true
  # end of block
  when: firstbootcheck.stat.exists == false
  
- name: entitlement block
  block:
    - name: "Fall back to RHSM, Check if we are registered"
      shell: "subscription-manager status || true"
      register: rhsm_reg
      become: yes
      when:
      - ansible_distribution_major_version == '9'
      - firstbootcheck.stat.exists == false

  rescue:
    - name: "well that didn't work"
      debug:
        msg: "did it?"
        
    - name: "subscribe to the cdn"
      shell: subscription-manager register --auto-attach --username "{{ rh_satellite_user }}" --password "{{ rh_satellite_pass }}"
      become: yes

    - name: "Enabling needed repos for rhel8"
      shell: "subscription-manager repos --enable={{ item }}"
      with_items: "{{ rh8_enabled_repos }}"
      when: item not in repolist.stdout
      become: true

    - name: "Run yum update to avoid a bug. Please wait. SSH to Host and tail /tmp/tower.output for status"
      shell: |
        exec &> >(tee -a /tmp/tower.output)
        yum -y update
      become: true
      args:
        executable: /bin/bash
        creates: /tmp/tower.output

    - name: "Perform a yum clean all"
      shell:  yum clean all
      become: true

- name: "first boot complete"
  file:
    path: "/opt/{{ item }}"
    state: touch
    mode: 0444
  become: true
  loop:
  - '.firstboot'
  - '.bootstrap'

