---
- name: "Haproxy Setup check"
  shell: |
    if [ -e "/root/.setup/haproxy-rpms" ]
    then
      echo "true"
    else
      echo "false"
    fi
  register: initialsetup
  become: true

- name: "Block to perform initial setup"
  block:
    - name: "make setup tracking dir"
      file:
        path: /root/.setup
        state: directory
        mode: 0755
      become: true

    - name: "Installing haproxy rpms"
      ignore_errors: yes
      yum:
        #name: ["haproxy","policycoreutils-python"]
        name: ["haproxy"]
        state: latest
      become: true

    - name: "make setup tracking dir"
      file:
        path: /root/.setup/haproxy-rpms
        state: touch
        mode: 0440
      become: true
  when: initialsetup.stdout == "false"

- name: "Block to perform configure haproxy"
  block:
  - name: "Fixing haproxy config"
    template:
      src: haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
      owner: root
      group: root
      mode: 0644
    become: yes
    notify: restart haproxy

  - name: "Set selinux flag to allow haproxy connections"
    shell: |
      /usr/sbin/semanage boolean --modify --on haproxy_connect_any
    become: yes

  - name: "Disable cockpit if found"
    service:
      name: cockpit.socket
      enabled: no
      state: stopped
    become: yes
    ignore_errors: yes

  - name: "Enable and start haproxy"
    service:
      name: haproxy
      enabled: yes
    become: yes

  - name: "Enable proxyied services"
    firewalld:
      immediate: yes
      port: "{{ item.port }}/{{ item.mode }}"
      state: enabled
      permanent: yes
    loop: "{{ haproxy_services }}"

  rescue:
  - name: "You will need to rerun this playbook"
    debug:
      msg:  "The capsule has not successfully been added to the capsules group in Tower."

#  always:
#  - name: "Add loadbalancer to the DNS"
#    ignore_errors: yes
#    shell: |
#      zone="{{ dns_domain }}"
#      hostname="capsule-lb"
#      ipaddress={{ ansible_default_ipv4['address'] }}
#      extravars="{\\\"fqdn\\\":\\\"${hostname}.${zone}\\\",\\\"zone\\\":\\\"${zone}\\\",\\\"public_ip\\\":\\\"${ipaddress}\\\"}"
#      curl -s -f -k -H 'Content-Type: application/json' -XPOST -d "{\"extra_vars\":\"${extravars}\"}" --user {{ tower_user}}:{{ tower_pass }} https://{{ tower_server }}:443/api/v2/job_templates/30/launch/
#      #ipaddress=$(curl -s http://169.254.169.254/2019-10-01/meta-data/local-ipv4)
#    args:
#      executable: /bin/bash
- include: "tower.yml"
#- include: "capsule-lb.yml"
