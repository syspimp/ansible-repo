---
- name: "Check if we are entitled for Satellite"
  become: yes
  shell: "subscription-manager list --consumed"
  args:
    executable: /bin/bash
  ignore_errors: yes
  register: rhsm_reg
    
- name: "Try to Entitle to use Satellite 6"
  block:
    - name: "Add Satellite Entitlement to Server"
      redhat_subscription:
        state: present
        username: "{{ rh_satellite_user }}"
        password: "{{ rh_satellite_pass }}"
        pool_ids: "{{ rh_satellite_pool_id }}"
      become: true
      register: rhsm_status
      retries: 10
      delay: 1
  when: "'Red Hat Satellite' not in rhsm_reg.stdout"

- name: "Satellite Setup check"
  shell: |
    if [ -e "/root/.setup/fusor.success" ]
    then
      echo "true"
    else
      echo "false"
    fi
  register: initialsetup
  become: true

- name: "Updated User data template"
  template:
    dest: /var/tmp/user-data-template.txt
    src: user-data-template.txt.j2
    owner: root
    group: root
    mode: 0644

- name: "Block to perform initial setup"
  block:
    - name: "make setup tracking dir"
      file:
        path: /root/.setup
        state: directory
        mode: 0755
  
    - name: "Disabling all repos"
      shell: "subscription-manager repos --disable='*'"
      become: true
    
    - name: "Enable satellite repos"
      shell: |
        subscription-manager repos --enable rhel-7-server-rpms \
                           --enable rhel-server-rhscl-7-rpms \
                           --enable rhel-7-server-satellite-{{ satellite_version }}-rpms \
                           --enable rhel-7-server-satellite-tools-{{ satellite_version }}-rpms \
                           --enable=rhel-7-server-satellite-maintenance-6-rpms \
                           --enable=rhel-7-server-ansible-2.8-rpms 
      become: true
    
    - name: "Clean out old yum metadata"
      shell: |
        yum clean all
      become: true
    
    - name: "Turn on notify_only=0 in search-disabled-repos.conf"
      lineinfile:
        path: /etc/yum/pluginconf.d/search-disabled-repos.conf
        regexp: '^notify_only=*'
        line: 'notify_only=0'
    
    - name: "Modify ignore_repo in search-disabled-repos.conf"
      lineinfile:
        path: /etc/yum/pluginconf.d/search-disabled-repos.conf
        regexp: '^ignored_repos=*'
        line: 'ignored_repos=*debug-rpms *source-rpms'
    
    - name: "Installing satellite rpms"
      yum:
        name: "satellite"
        state: latest
      become: true

    - name: "installing private key to accesss OSP"
      template:
        src: openstack/blank.key.j2
        dest: /root/.ssh/id_rsa
        owner: root
        group: root
        mode: 0600

    - name: "Run fusor installer, takes about 20 mins ..."
      shell: |
        satellite-installer --scenario satellite \
        --foreman-initial-organization "{{ sat6_default_org }}" \
        --foreman-initial-location "{{ sat6_default_location }}" \
        --foreman-initial-admin-password {{ sat6_pass }} \
        --foreman-proxy-puppetca true \
        --foreman-proxy-tftp true \
        --disable-system-checks \
        --enable-foreman-plugin-discovery && touch /root/.setup/fusor.success
      become: true
      args:
        creates: /root/.setup/fusor.success
  
    - name: "make hammer config dir"
      file:
        path: /root/.hammer
        state: directory
        mode: 0755
  
    - name: "Configure hammer cli tool"
      template:
          dest: /etc/hammer/cli_config.yml
          src: cli_config.yml.j2
          owner: root
          group: root
          mode: 0644
  
    - name: "Setting hammer to use default org and locations"
      shell: |
        hammer user update --login admin \
        --default-location-id 1 \
        --default-organization-id 1 \
        --locations "{{ sat6_default_location }}" \
        --organizations "{{ sat6_default_org }}"
      become: true

    - name: "Configure puppet autosigning"
      template:
          dest: /etc/puppetlabs/puppet/autosign.conf
          src: autosign.conf.j2
          owner: foreman-proxy
          group: puppet
          mode: 0644

    - name: "Restart puppetmaster"
      shell: systemctl restart puppetserver


#    - name: "Open firewall port for external access to Satellite at sat6.dev.maskedadmins.com:8448"
#      ignore_errors: yes
#      shell: |
#        echo "calling update firewall port for sat6"
#        curl -f -k -H 'Content-Type: application/json' -XPOST -d '{"extra_vars":"{\"int_ip\":\"{{ ansible_default_ipv4['address'] }}\",\"int_port\":\"443\",\"ext_port\":\"8448\"}"}' --user admin:ansible https://{{ tower_server }}:443/api/v1/job_templates/660/launch/

  when: initialsetup.stdout == "false"


#- name: "Creating Orgs for Satellite 6"
#  shell: |
#      hammer organization create --name "{{ item.name }}" --label "{{ item.label }}" \
#      --description "{{ item.description }}"
#  with_items: "{{ sat6.orgs }}"
#  args:
#    creates: /root/.setup/step1
#
#- name: "Org creation Complete"
#  shell: touch /root/.setup/step1
#  args:
#    creates: /root/.setup/step1
#
#- name: "Creating Locations for Satellite 6"
#  shell: |
#      hammer location create --name "{{ item }}"
#  with_items: "{{ sat6.locations }}"
#  args:
#    creates: /root/.setup/step2
#
#- name: "Location creation Complete"
#  shell: touch /root/.setup/step2
#  args:
#    creates: /root/.setup/step2
#
#- name: "Adding Orgs to Locations"
#  shell: |
#      hammer location add-organization --name "{{ item.1 }}" --organization "{{ item.0.name }}"
#  with_subelements:
#    - "{{ sat6.orgs }}"
#    - locations
#  args:
#    creates: /root/.setup/step3
#
#- name: "Org to Location creation Complete"
#  shell: touch /root/.setup/step3
#  args:
#    creates: /root/.setup/step3
#
#  - name: "Setting default org and location Satellite 6"
#    shell: |
#        defaultorg=$(hammer organization list  | grep {{ sat6_default_org }} | awk '{print $1}')
#        defaultloc=$(hammer location list  | grep {{ sat6_default_location }} | awk '{print $1}')
#        hammer defaults add --param-name organization_id --param-value $defaultorg
#        hammer defaults add --param-name location_id --param-value $defaultloc && touch /root/.setup/step1
#    args:
#      creates: /root/.setup/step4

- name: "Subnet and Domain check"
  shell: |
    if [ -e "/root/.setup/step9" ]
    then
      echo "true"
    else
      echo "false"
    fi
  register: subnetstep
  become: true

- name: "Domain and Subnet creation"
  block:
    - name: "Creating domains"
      shell: |
          hammer domain create --name "{{ item }}" || true
      with_items: "{{ sat6.domains }}"
      ignore_errors: yes
      args:
        creates: /root/.setup/step4
  
    - name: "Domain creation Complete"
      shell: touch /root/.setup/step4
      args:
        creates: /root/.setup/step4
  
    - name: "Creating subnets and adding to domains"
      shell: |
          domainid=$(hammer domain list  | grep "| {{ item.domain }}" | awk '{print $1}')
          hammer subnet create --domain-ids=${domainid} \
          --gateway={{ item.gw }} \
          --mask={{ item.mask }} \
          --name={{ item.name }} \
          --tftp-id=1 --network={{ item.network }} \
          --dns-primary={{ item.dns }}
      with_items: "{{ sat6.subnets }}"
      ignore_errors: yes
      args:
        creates: /root/.setup/step5
  
    - name: "Subnet creation Complete"
      shell: touch /root/.setup/step5
      args:
        creates: /root/.setup/step5
  
    - name: "Adding Domains to Orgs and Locations"
      ignore_errors: yes
      shell: |
          domainid=$(hammer domain list  | grep "| {{ item.1 }}" | awk '{print $1}')
          hammer organization add-domain --domain-id=${domainid} --name '{{ item.0.name }}'
      with_subelements:
        - "{{ sat6.orgs }}"
        - domains
      args:
        creates: /root/.setup/step6
  
    - name: "Adding Default Domain to Orgs and Locations"
      shell: |
          domainid=$(hammer domain list  | grep "| {{ sat6_default_domain }}" | awk '{print $1}')
          hammer organization add-domain --domain-id=${domainid} --name '{{ sat6_default_org }}'
      args:
        creates: /root/.setup/step6

    - name: "Subnet creation Complete"
      shell: touch /root/.setup/step6
      args:
        creates: /root/.setup/step6
  
    - name: "Adding Subnets to Orgs"
      shell: |
          subnetid=$(hammer subnet list  | grep {{ item.1 }} | awk '{print $1}')
          hammer organization add-subnet --subnet-id=${subnetid} --name '{{ item.0.name }}'
      with_subelements:
        - "{{ sat6.orgs }}"
        - subnets
      args:
        creates: /root/.setup/step7
  
    - name: "Adding Default Subnet to Orgs"
      shell: |
          subnetid=$(hammer subnet list  | grep {{ sat6_default_subnet }} | awk '{print $1}')
          hammer organization add-subnet --subnet-id=${subnetid} --name '{{ sat6_default_org }}'
      args:
        creates: /root/.setup/step7

    - name: "Add subnet to org Complete"
      shell: touch /root/.setup/step7
      args:
        creates: /root/.setup/step7
  
    - name: "Adding Domains to Locations"
      shell: |
          domainid=$(hammer domain list  | grep "| {{ item.domain }}" | awk '{print $1}')
          hammer location add-domain --domain-id=${domainid} --name '{{ item.location }}'
      with_items: "{{ sat6.subnets }}"
      args:
        creates: /root/.setup/step8
  
    - name: "Adding Default Domain to Locations"
      shell: |
          domainid=$(hammer domain list  | grep "| {{ sat6_default_domain }}" | awk '{print $1}')
          hammer location add-domain --domain-id=${domainid} --name '{{ sat6_default_location }}'
      args:
        creates: /root/.setup/step8

#    - name: "Removing Default Domain from Default Location"
#      shell: |
#          hammer location remove-domain --id=2 --domain '{{ sat6_default_domain }}' && \
#          touch /root/.setup/step8a
#      args:
#        creates: /root/.setup/step8a

    - name: "Add Domains to location Complete"
      shell: touch /root/.setup/step8
      args:
        creates: /root/.setup/step8
  
    - name: "Adding Subnets to Locations"
      shell: |
          subnetid=$(hammer subnet list  | grep {{ item.name }} | awk '{print $1}')
          hammer location add-subnet --subnet-id=${subnetid} --name '{{ item.location }}'
      with_items: "{{ sat6.subnets }}"
      args:
        creates: /root/.setup/step9
  
  
#    - name: "Removing default subnet from Default Location"
#      shell: |
#          hammer location remove-subnet --id 2 --subnet default && \
#          touch /root/.setup/step9a
#      args:
#        creates: /root/.setup/step9a

    - name: "Adding Default Subnet to Locations"
      shell: |
          subnetid=$(hammer subnet list  | grep {{ sat6_default_subnet }} | awk '{print $1}')
          hammer location add-subnet --subnet-id=${subnetid} --name '{{ sat6_default_location }}'
      args:
        creates: /root/.setup/step9
  
    - name: "Add Subnets to location Complete"
      shell: touch /root/.setup/step9
      args:
        creates: /root/.setup/step9
  when: subnetstep.stdout == "false"

  always:
    - name: "Subnet section complete"
      debug:  msg="Looks like we are done with subnet and domain section"

- name: "Copy over manifest"
  #template:
  copy:
      dest: /tmp/manifest.zip
      #src: "satellite/{{ sat6_manifest }}"
      src: "/opt/satellite/{{ sat6_manifest }}"
      owner: root
      group: root
      mode: 0644

- name: "Provisioning Satellite 6 - upload and refresh manifest"
  shell: |
      hammer subscription upload --file /tmp/manifest.zip --organization "{{ sat6_default_org }}" && \
      hammer subscription refresh-manifest --organization "{{ sat6_default_org }}" && \
      touch /root/.setup/step10
  args:
    creates: /root/.setup/step10

- name: "Provisioning Satellite 6 - base repositories"
  shell: |
      hammer repository-set enable \
      --name "{{ item.name }}" \
      --releasever "7Server" --basearch "x86_64" \
      --product "{{ item.product }}" --organization "{{ sat6_default_org }}"
  with_items: "{{ sat6_enabled_repos }}"
  ignore_errors: yes
  args:
    creates: /root/.setup/step11a

- name: "Repo config Complete"
  shell: touch /root/.setup/step11a
  args:
    creates: /root/.setup/step11a

- name: "Provisioning Satellite 6 - Tools repos without a releaseversion"
  ignore_errors: yes
  shell: |
      hammer repository-set enable \
      --name "{{ item.name }}" \
      --basearch "x86_64" \
      --product "{{ item.product }}" --organization "{{ sat6_default_org }}"
  with_items:
    - "{{ sat6_enabled_repos_tools }}"
  args:
    creates: /root/.setup/step11b

- name: "Repo config Complete"
  shell: touch /root/.setup/step11b
  args:
    creates: /root/.setup/step11b

#- name: "Provisioning Satellite 6 - configure Openstack repositories"
#  shell: |
#      hammer repository-set enable \
#      --name "{{ item.name }}" \
#      --releasever "7Server" --basearch "x86_64" \
#      --product "{{ item.product }}" --organization "{{ sat6_default_org }}"
#  with_items: "{{ sat6_enabled_repos_openstack }}"
#  args:
#    creates: /root/.setup/step11c

- name: "Repo config Complete"
  shell: touch /root/.setup/step11c
  args:
    creates: /root/.setup/step11c

#- name: "Provisioning Satellite 6 - configure Openshift repositories without releaseversion"
#  shell: |
#      hammer repository-set enable \
#      --name "{{ item.name }}" \
#      --basearch "x86_64" \
#      --product "{{ item.product }}" --organization "{{ sat6_default_org }}"
#  with_items: "{{ sat6_enabled_repos_openshift }}"
#  args:
#    creates: /root/.setup/step11d

- name: "Repo config Complete"
  shell: |
    touch /root/.setup/step11d
  args:
    creates: /root/.setup/step11d

- name: "Provisioning Satellite 6 - Syncing RHEL Product Content. This takes 100+ mins with all the repos to sync..."
  ignore_errors: yes
  shell: |
      hammer product synchronize --name "{{ item }}" \
      --organization "{{ sat6_default_org }}" --async
      #--organization "{{ sat6_default_org }}"
  with_items:
    - "{{ sat6_enabled_products }}"
  args:
    creates: /root/.setup/step12

- name: "Product Sync Complete"
  shell: |
    touch /root/.setup/step12
  args:
    creates: /root/.setup/step12

- name: "Provisioning Satellite 6 Host Collection"
  shell: |
      hammer host-collection create --name={{ sat6_default_hostcollection }} --organization "{{ sat6_default_org }}" && \
      touch /root/.setup/step13
  args:
    creates: /root/.setup/step13

- name: "Provisioning Satellite 6 Lifecycle"
  shell: |
      hammer lifecycle-environment create --name "{{ item.name }}" \
      --description "Environment for {{ sat6_default_org }}'s {{ item.name }} Team" \
      --prior "{{ item.prior }}" --organization "{{ sat6_default_org }}"
  with_items: "{{ sat6.environments }}"
  args:
    creates: /root/.setup/step14

- name: "Provisioning Satellite 6 Puppet Environments"
  shell: |
      hammer environment create --name {{ sat6_default_environment }} --locations {{ sat6_default_location }} --organizations {{ sat6_default_org }}
  args:
    creates: /root/.setup/step14

- name: "Provisionging Lifecycle Complete"
  shell: touch /root/.setup/step14
  args:
    creates: /root/.setup/step14

- name: "Creating Base Content View"
  shell: |
      set -x
      sattoolsid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Satellite Tools {{ satellite_version }}" | awk '{print $1}')
      rhelrepoid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Linux 7 Server RPMs x86_64 7Server" | awk '{print $1}')
      ksid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Linux 7 Server Kickstart x86_64 7Server" | awk '{print $1}')
      commonid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Common" | awk '{print $1}')
      extraid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Extras" | awk '{print $1}')
      optionalid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Optional" | awk '{print $1}')
      #fastdataid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Fast Datapath" | awk '{print $1}')
      #openstackid=$(hammer repository list --organization {{ sat6_default_org }} | grep "OpenStack Platform {{ openstack_version }} for RHEL 7" | awk '{print $1}')
      #openstackdevid=$(hammer repository list --organization {{ sat6_default_org }} | grep "OpenStack Platform {{ openstack_version }} Developer Tools" | awk '{print $1}')
      #openshiftid=$(hammer repository list --organization {{ sat6_default_org }} | grep "Red Hat OpenShift Container Platform" | awk '{print $1}')
      #--repository-ids "${extraid},${ksid},${rhelrepoid},${sattoolsid},${commonid},${optionalid},${fastdataid},${openstackid},${openstackdevid},${openshiftid}"
      hammer content-view create --name "Base" \
      --description "Base operating system" \
      --repository-ids "${extraid},${ksid},${rhelrepoid},${sattoolsid},${commonid},${optionalid}" \
      --organization "{{ sat6_default_org }}"
      hammer content-view publish --name "Base" \
      --description "Initial content view for our operating system" \
      --organization "{{ sat6_default_org }}" && \
      touch /root/.setup/step15
  args:
    creates: /root/.setup/step15

- name: "Promoting Environments {{ sat6.environments }}"
  shell: |
      hammer content-view version promote --content-view "Base" --version 1 \
      --to-lifecycle-environment "{{ item.name }}" --organization "{{ sat6_default_org }}"
  with_items: "{{ sat6.environments }}"
  args:
    creates: /root/.setup/step16

- name: "Promotion Complete"
  shell: touch /root/.setup/step16
  args:
    creates: /root/.setup/step16

- name: "Creating activation keys for environments"
  shell: |
    hammer activation-key create --name "{{ sat6_default_org }}-{{ item.name }}-key" \
    --unlimited-hosts --description "Example activation key for {{ item.name }}" \
    --lifecycle-environment "{{ item.name }}" --content-view "Base" \
    --organization "{{ sat6_default_org }}"
  with_items: "{{ sat6.environments }}"
  args:
    creates: /root/.setup/step17

- name: "Activation keys Complete"
  shell: touch /root/.setup/step17
  args:
    creates: /root/.setup/step17

- name: "Adding subs to activation keys for environments"
  shell: |
    subid=$(hammer subscription list --organization "{{ sat6_default_org }}"| grep "{{ item[1] }}"| cut -f1 -d\|)
    hammer activation-key add-subscription --name "{{ sat6_default_org }}-{{ item[0]['name'] }}-key" \
    --subscription-id ${subid} \
    --organization "{{ sat6_default_org }}"
  with_nested:
    - "{{ sat6.environments }}"
    - "{{ sat6.subs_for_activationkeys }}"
  args:
    creates: /root/.setup/step18

- name: "Adding subs to activation keys Complete"
  shell: touch /root/.setup/step18
  args:
    creates: /root/.setup/step18

- name: "Enabling sat tools repo in the keys"
  shell: |
    hammer activation-key content-override --name "{{ sat6_default_org }}-{{ item.name }}-key" \
    --content-label rhel-7-server-satellite-tools-{{ satellite_version }}-rpms \
    --value 1 --organization "{{ sat6_default_org }}"
  with_items: "{{ sat6.environments }}"
  args:
    creates: /root/.setup/step19

- name: "Step Complete"
  shell: touch /root/.setup/step19
  args:
    creates: /root/.setup/step19

- name: "Adding host collection to activation keys"
  shell: |
    hammer activation-key add-host-collection --name={{ sat6_default_org }}-{{ item.name }}-key --host-collection={{ sat6_default_hostcollection }} --organization={{ sat6_default_org }}
  with_items: "{{ sat6.environments }}"
  args:
    creates: /root/.setup/step20


- name: "Step Complete"
  shell: touch /root/.setup/step20
  args:
    creates: /root/.setup/step20

- name: "Add all subscriptions to activation keys"
  ignore_errors: yes
  shell: |
    for i in $(hammer --csv activation-key list --organization={{ sat6_default_org }} | awk -F, {'print $1'} | grep -vi '^ID'); do \
    for j in $(hammer --csv subscription list --organization={{ sat6_default_org }}  | awk -F, {'print $1'} | grep -vi '^ID'); do \
    hammer activation-key add-subscription --id ${i} --subscription-id ${j}; done; done && \
    touch /root/.setup/step21
  args:
    creates: /root/.setup/step21

- name: "Add partition table to OS"
  shell: |
    PARTID=$(hammer --csv partition-table list | grep 'Kickstart default,' | awk -F, {'print $1'})
    for i in $(hammer --csv os list | awk -F, {'print $1'} | grep -vi '^ID')
    do
    hammer partition-table add-operatingsystem --id="${PARTID}" --operatingsystem-id="${i}"  
    done && \
    touch /root/.setup/step22
  args:
    creates: /root/.setup/step22

- name: "Clone the Default User Data Kickstart"
  shell: |
    hammer template clone --name 'Kickstart default user data' --new-name '{{ sat6_default_org }} User Data' && \
    touch /root/.setup/step23a
  args:
    creates: /root/.setup/step23a

- name: "Update the new user data template"
  shell: |
    USERDATAID=$(hammer --csv template list | grep "{{ sat6_default_org }}" | awk -F, {'print $1'})
    hammer template update --file /var/tmp/user-data-template.txt --id ${USERDATAID} && \
    touch /root/.setup/step23b
  args:
    creates: /root/.setup/step23b

- name: "Add kickstart pxe template to OS"
  shell: |
    PXEID=$(hammer --csv template list | grep 'Kickstart default PXELinux' | awk -F, {'print $1'})
    SATID=$(hammer --csv template list | grep 'Kickstart default' | grep 'provision' | awk -F, {'print $1'})
    USERDATAID=$(hammer --csv template list | grep "{{ sat6_default_org }}" | awk -F, {'print $1'})
    for i in $(hammer --csv os list | awk -F, {'print $1'} | grep -vi '^ID')
    do
    hammer template add-operatingsystem --id="${PXEID}" --operatingsystem-id="${i}"
    hammer os set-default-template --id="${i}" --config-template-id="${PXEID}"
    hammer os add-config-template --id="${i}" --config-template-id="${SATID}"
    hammer os add-config-template --id="${i}" --config-template-id="${USERDATAID}"
    hammer os set-default-template --id="${i}" --config-template-id="${SATID}"
    hammer os set-default-template --id="${i}" --config-template-id="${USERDATAID}"
    done && \
    touch /root/.setup/step23
  args:
    creates: /root/.setup/step23

#- name: "Update Medium Location"
#  shell: |
#    MEDID=$(hammer --csv medium list | grep 'Kickstart_x86_64_7Server' | awk -F, {'print $1'})
#    hammer medium update --id ${MEDID} --locations {{ sat6_default_location }} && \
#    touch /root/.setup/setup23aa
#  args:
#    creates: /root/.setup/step23aa
#
#- name: "Update OS with medium"
#  shell: |
#    MEDID=$(hammer --csv medium list | grep 'Kickstart_x86_64_7Server' | awk -F, {'print $1'})
#    OSID=$(hammer --csv os list | grep 'RedHat 7' | awk -F, {'print $1'})
#    for os in $OSID
#    do
#      hammer os update --id ${os} --medium-ids ${MEDID}
#    done
#    touch /root/.setup/setup23bb
#  args:
#    creates: /root/.setup/step23bb

- name: "Add RHEL7 host group for each domain"
  shell: |
    #MEDID=$(hammer --csv medium list | grep 'Kickstart_x86_64_7Server' | awk -F, {'print $1'})
    PARTID=$(hammer --csv partition-table list | grep 'Kickstart default,' | awk -F, {'print $1'})
    OSID=$(hammer --csv os list | grep 'RedHat 7' | awk -F, {'print $1'})
    LCID=$(hammer lifecycle-environment list --organization {{ sat6_default_org }} | grep '{{ sat6_default_environment }} | Library' | awk -F\| {'print $1'})
    CAID=1
    CSID=1
    PROXYID=1
    for os in $OSID
    do
      osname=$(hammer os info --id ${os} |grep Title:|sed -e 's/Title:              //g')
      hammer hostgroup create --environment {{ sat6_default_environment }} --architecture="x86_64" --domain="{{ item.domain }}"  --content-source-id="${CSID}"  --locations="{{ item.location }}" \
      --query-organization="{{ sat6_default_org }}" --name="{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --subnet="{{ item.name }}" --partition-table-id="${PARTID}" \
      --operatingsystem-id="${os}" --puppet-ca-proxy-id="${CAID}" --puppet-proxy-id="${PROXYID}" --content-view="Base" --lifecycle-environment-id="${LCID}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "ssh_authorized_keys"  --value "{{ cloud_user_pub_key }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "ansible_host_config_key"  --value "{{ tower_key }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "ansible_tower_fqdn"  --value "{{ tower_server }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "ansible_job_template_id"  --value "{{ tower_jobid }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "kt_activation_keys"  --value "{{ item.activation_key }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ item.domain }} ${osname}" --name "ansible_tower_provisioning"  --value "true"
    done
  args:
    creates: /root/.setup/step24
  with_items: "{{ sat6.subnets }}"

- name: "Add RHEL7 host group for default domain"
  shell: |
    #MEDID=$(hammer --csv medium list | grep 'Kickstart_x86_64_7Server' | awk -F, {'print $1'})
    PARTID=$(hammer --csv partition-table list | grep 'Kickstart default,' | awk -F, {'print $1'})
    OSID=$(hammer --csv os list | grep 'RedHat 7' | awk -F, {'print $1'})
    LCID=$(hammer lifecycle-environment list --organization {{ sat6_default_org }} | grep '{{ sat6_default_environment }} | Library' | awk -F\| {'print $1'})
    CAID=1
    CSID=1
    PROXYID=1
    for os in $OSID
    do
      osname=$(hammer os info --id ${os} |grep Title:|sed -e 's/Title:              //g')
      #hammer hostgroup create --environment {{ sat6_default_environment }} --architecture="x86_64" --domain="{{ sat6_default_domain }}" --content-source-id="${CSID}" --medium-id="${MEDID}" --locations="{{ sat6_default_location }}"
      hammer hostgroup create --environment {{ sat6_default_environment }} --architecture="x86_64" --domain="{{ sat6_default_domain }}" --content-source-id="${CSID}" --locations="{{ sat6_default_location }}" \
    --query-organization="{{ sat6_default_org }}" --name="{{ sat6_default_hostgroup }} for {{ sat6_default_domain }} ${osname}" --subnet="{{ sat6_default_subnet }}" --partition-table-id="${PARTID}" \
    --operatingsystem-id="${os}" --puppet-ca-proxy-id="${CAID}" --puppet-proxy-id="${PROXYID}" --content-view="Base" --lifecycle-environment-id="${LCID}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ sat6_default_domain }} ${osname}" --name "sshkey"  --value "{{ cloud_user_pub_key }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ sat6_default_domain }} ${osname}" --name "tower_key"  --value "{{ tower_key }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ sat6_default_domain }} ${osname}" --name "tower_server"  --value "{{ tower_server }}"
      hammer hostgroup set-parameter --hostgroup "{{ sat6_default_hostgroup }} for {{ sat6_default_domain }} ${osname}" --name "tower_jobid"  --value "{{ tower_jobid }}"
    done
  args:
    creates: /root/.setup/step24

- name: "Host groups to domain Complete"
  shell: touch /root/.setup/step24
  args:
    creates: /root/.setup/step24

- name: "Add Openstack Compute Resources"
  ignore_errors: yes
  shell: |
    hammer compute-resource create \
    --name "{{ item.name }}" \
    --description "{{ item.description }}" \
    --locations "{{ sat6_default_location }}" \
    --organizations "{{ sat6_default_org }}" \
    --provider  Openstack \
    --user {{ item.user }} \
    --password {{ item.pass }} \
    --tenant="{{ item.tenant }}" \
    --domain="default" \
    --url {{ item.url }}
  with_items: "{{ compute_resources }}"
  args:
    creates: /root/.setup/step25

- name: "Openstack Compute Resources Complete"
  shell: touch /root/.setup/step25
  args:
    creates: /root/.setup/step25


- name: "Add Openstack Compute Resources for RHEL 7.5"
  ignore_errors: yes
  shell: |
    set -x
    images=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ item.controller }} "source keystonerc_admin ; glance image-list | cut -d\| -f3| grep -v \+ | grep -v '^ Name'| sed -e 's/^ //g'|  sed -e 's/[[:space:]]*$//'| tr \"\n\" ','")
    OLDIFS=$IFS
    IFS=,
    for imagename in $images;
    do
        [ -z "$imagename" ] && continue
        echo "Image: '${imagename}'"
        uuid=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ item.controller }} "source keystonerc_admin ; glance image-list | grep '${imagename}' | cut -d\| -f2| xargs")
        hammer compute-resource image create --name "$imagename" \
        --operatingsystem "RedHat 7.5" --architecture "x86_64" \
        --username root --user-data true \
        --compute-resource "{{ item.name }}" \
        --uuid "${uuid}"
    done
    IFS=$OLDIFS
  with_items: "{{ compute_resources }}"
  args:
    creates: /root/.setup/step26

- name: "Compute Resources Complete"
  shell: touch /root/.setup/step26
  args:
    creates: /root/.setup/step26

#- name: "Add Openstack Compute Resources for RHEL 7.3"
#  shell: |
#    set -x
#    images=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ item.controller }} "source keystonerc_admin ; glance image-list | cut -d\| -f3| grep -v \+ | grep -v '^ Name'| sed -e 's/^ //g'|  sed -e 's/[[:space:]]*$//'| tr \"\n\" ','")
#    OLDIFS=$IFS
#    IFS=,
#    for imagename in $images;
#    do
#        [ -z "$imagename" ] && continue
#        echo "Image: '${imagename}'"
#        uuid=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ item.controller }} "source keystonerc_admin ; glance image-list | grep '${imagename}' | cut -d\| -f2| xargs")
#        hammer compute-resource image create --name "$imagename" \
#        --operatingsystem "RedHat 7.3" --architecture "x86_64" \
#        --username root --user-data true \
#        --compute-resource "{{ item.name }}" \
#        --uuid "${uuid}"
#    done
#    IFS=$OLDIFS
#  with_items: "{{ compute_resources }}"
#  args:
#    creates: /root/.setup/step27

- name: "Compute Images Complete"
  shell: touch /root/.setup/step27
  args:
    creates: /root/.setup/step27

- name: "Set unattended_url to ip address"
  shell: |
    hammer settings set \
    --name unattended_url \
    --value "http://$(ip a | grep -E 'inet\s' | awk 'NR==2' | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]+' | grep -oE '^[^/]*')" && \
    touch /root/.setup/step28
  args:
    creates: /root/.setup/step28

- name: "Set Capsule to proper location"
  shell: |
    hammer capsule update --id 1 --locations {{ sat6_default_location }} && \
    touch /root/.setup/step29
  args:
    creates: /root/.setup/step29
    
- name: "Open firewall port for external access to Satellite at sat6.dev.maskedadmins.com:8448"
  ignore_errors: yes
  uri:
    url: "https://{{ tower_server }}:443/api/v2/job_templates/28/launch/"
    method: POST
    validate_certs: false
    user: "admin"
    password: "redhat"
    status_code: 204
    body: 
      extra_vars:
        int_ip: "{{ ansible_default_ipv4['address'] }}"
        ports:
          - inside: 443
            outside: 443
          - inside: 5647
            outside: 5647
          - inside: 5000
            outside: 5000
          - inside: 80
            outside: 80
          - inside: 8000
            outside: 8000
          - inside: 8140
            outside: 8140
          - inside: 8443
            outside: 8443
          - inside: 9090
            outside: 9090
    body_format: json
    when: ansible_local['awsroles'] is not defined
