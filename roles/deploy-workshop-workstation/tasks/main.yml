---
- name: "list the rpms installed"
  shell: rpm -qa
  register: rpmlist

- name: "install rpms if needed"
  shell: yum -y install {{ item }}
  become: yes
  when: item not in rpmlist.stdout
  loop: "{{ workshop_deps.rpms }}"
  - git
  - ansible

- name: "list the installed pip dependencies"
  shell: pip list
  become: yes
  register: piplist

- name: "install needed pip dependencies"
  shell: pip install {{ item }}
  become: yes
  when: item not in piplist.stdout
  loop: "{{ workshop_deps.pipmods }}"

- name: "install needed ansible collections"
  shell: ansible-galaxy collection install -p /etc/ansible community.general
  become: yes

- name: "clone the github repo"
  shell: git clone https://github.com/ansible/workshops
  become: yes
  args:
    creates: /root/workshops

- name: "place the extra vars template"
  template:
    content: workshop.yml.j2
    dest: "/root/workshops/provisioner/workshop-{{ workshop.name }}"
  become: yes

- name: "create aws directory to store creds"
  file:
    path: /root/.aws
    state: directory

- name: "copy the aws credential template"
  template:
    content: aws-credentials.j2
    dest: /root/.aws/credentials

- name: "copy up the entitlement manifest"
  copy:
    src: manifest.zip
    dest: /root/workshops/provisioner/manifest.zip

- name: "grab the latest tower tarball"
  unarchive:
    src: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz
    dest: /opt/
  become: yes

- name: "update the tower setup inventory file"
  template:
    content: tower-inventory.j2
    dest: /opt/ansible-tower-setup-3.8.3-2/inventory

- name: "run the tower installer"
  shell: |
    cd /opt/ansible-tower-setup-*
    ./setup.sh && touch /opt/.tower-setup
  become: yes
  args:
    creates: /opt/.tower-setup

- name: "upgrade boto3 for awx user for workshop deployments"
  shell: |
    source /var/lib/awx/venv/ansible/bin/activate
    umask 0022
    pip install --upgrade boto3
    deactivate
    touch /opt/.tower-setup2
  become: yes
  args:
    creates: /opt/.tower-setup2

- name: Load manifest into variable
  local_action:
    module: slurp
    src: "manifest.zip"
  register: manifest_file
  become: false

- name: Post manifest file
  uri:
    url: https://localhost/api/v2/config/
    method: POST
    user: admin
    password: "{{ tower_pass }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true


