---
- name: "Register to the correct Satellite Server"
  block:
  - name: "Find Group Inventory for 'satellite-server'"
    uri:
      url: "https://{{ tower_server }}/api/v2/groups/?search=satellite-server"
      validate_certs: no
      method: GET
      user: "{{ tower_user }}"
      password: "{{ tower_pass }}"
      force_basic_auth: yes
      status_code: [200,202,204]
      body_format: json
    register: groupidcheck

  - name: "Set the host_id fact"
    set_fact:
      satgroup_host_id: "{{ groupidcheck.json.results[0].id }}"

  - name: "Find the name of the satellite-server"
    uri:
      url: "https://{{ tower_server }}/api/v2/groups/{{ satgroup_host_id }}/hosts"
      validate_certs: no
      method: GET
      user: "{{ tower_user }}"
      password: "{{ tower_pass }}"
      force_basic_auth: yes
      status_code: [200,202,204]
      body_format: json
    register: hostidcheck

  - name: "Set the sat6_server fact"
    set_fact:
      sat6_server: "{{ hostidcheck.json.results[0].name }}"

  - name: "Check if we are registered"
    shell: "subscription-manager status"
    become: yes

  - name: "Make sure we are pointed to the correct satellite server"
    shell:
      subscription-manager config | grep "{{ sat6['lb_fqdn'] }}"
    become: yes
    when:
    - ansible_local['awsroles'] is defined
    - ansible_local['awsroles']['default']['role'] not in ['satellite-capsule','satellite-server','satellite-haproxy','haproxy']

  rescue:
  - name: "Save the enabled yum repos"
    shell: subscription-manager repos --list-enabled | grep "Repo ID:" | awk '{print $3}'
    become: yes
    register: oldrepos

  - name: "Unregister from the redhat cdn"
    ignore_errors: yes
    shell:
      subscription-manager clean
    become: yes

  - name: "Install the katello certificate"
    shell:
      rpm -Uvh --force http://{{ sat6_server }}/pub/katello-ca-consumer-latest.noarch.rpm
    become: yes

  - name: "Get the bootstrap python script"
    get_url:
      url: "http://{{ sat6_server }}/pub/bootstrap.py"
      dest: /opt/bootstrap.py
    become: yes

  - name: "Save the command to register to satellite server"
    template:
      src: reg-to-satellite.sh.j2
      dest: /opt/reg-to-satellite.sh
      owner: root
      group: root
      mode: 0755
    become: yes

  - name: "Run the satellite bootstrap script, ignoring errors"
    ignore_errors: yes
    shell: |
      /opt/reg-to-satellite.sh
    become: yes

  - name: dump the saved repos
    debug:
      var: oldrepos.stdout

  - name: "Re enable yum repos"
    ignore_errors: yes
    shell: subscription-manager repos --enable {{ item }}
    loop: "{{ oldrepos.stdout.split('\n') }}"
    become: yes

  - name: "Save the satellite key for remote execution"
    shell: |
      curl -k https://{{ sat6['lb_fqdn'] }}:9090/ssh/pubkey >> /root/.ssh/authorized_keys
      chmod 600 /root/.ssh/authorized_keys
    become: yes

  always:
  - name: "Apply ansible roles defined in Satellite for oscap scanning"
    shell: |
      hammer hostgroup ansible-roles play --id 1
    delegate_to: "{{ sat6_server }}"
    run_once: yes
    become: yes
      
  - name: "Start openscap scan from Satellite for host"
    shell: |
      hammer job-invocation create --search-query {{ inventory_hostname }} --job-template "Run OpenSCAP scans" --async
    delegate_to: "{{ sat6_server }}"
    become: yes
